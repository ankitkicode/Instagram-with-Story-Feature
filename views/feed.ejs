<% include ./partials/header.ejs %>
<div class="w-full min-h-screen bg-zinc-900 text-white py-5">
  <div class="w-full px-4 flex items-center justify-between">
    <img class="w-1/4" src="/images/logo.png" alt="" />
    <div class="icons -mt-2 flex gap-5 items-center">
      <i class="text-[1.4rem] ri-heart-3-line"></i>
     <a href="/message">
      <i class="text-[1.4rem] ri-messenger-line"></i>
     </a>
    </div>
  </div>
  <div class="story px-3 flex gap-3 overflow-auto mt-5">
    <a href="/story/0">
      <div class="circle flex-shrink-0">
        <div
          class="gradient w-[18vw] h-[18vw] bg-sky-100 rounded-full bg-gradient-to-r from-purple-700 to-orange-500 flex items-center justify-center"
        >
          <div class="inner w-[92%] h-[92%] rounded-full overflow-hidden">
            <img
              class="w-full h-full object-cover"
              src="/images/uploads/<%= user.profilePic %>"
              alt=""
            />
          </div>
          
        </div>
        <h4 class="">add story</h4>
      </div>
    </a>

    <% stories.forEach(function(elem){ %>
    <a href="/story/<%= elem.user._id %>/0">
      <div class="circle flex-shrink-0">
        <div
          class="gradient w-[18vw] h-[18vw] bg-sky-100 rounded-full bg-gradient-to-r from-purple-700 to-orange-500 flex items-center justify-center"
        >
          <div class="inner w-[92%] h-[92%] rounded-full overflow-hidden">
            <img
              class="w-full h-full object-cover"
              src="/images/uploads/<%= elem.user.profilePic %>"
              alt=""
            />
          </div>
        </div>
        <h4 class="ml-3"><%= elem.user.username %></h4>
      </div>
    </a>
    <% }) %>
  </div>
  <div class="posts mb-20">
    <% posts.reverse().forEach(function(post){ %>
    <div class="post relative mt-10 w-full min-h-[50vh]">
      <a href="/userProfile/<%= post.user._id %>">
        <div class="title px-4 flex items-center gap-2">
          <div class="w-[8vw] h-[8vw] bg-sky-100 rounded-full overflow-hidden">
            <img
              class="h-full w-full object-cover"
              src="/images/uploads/<%= post.user.profilePic %>"
              alt=""
            />
          </div>
          <h4 class="text-sm"><%=post.user.username %></h4>
          <h6 class="text-xs opacity-30">1d</h6>
        </div>
      </a>
      <div class="w-full h-96 mt-4 overflow-hidden">
        <img
          data-val="<%=post._id %>"
          class="h-full postImage w-full object-cover"
          src="/images/uploads/<%= post.image %>"
          alt=""
        />
      </div>
      <div
        class="options w-full px-4 flex justify-between items-center text-[1.4rem]"
      >
        <div class="flex gap-3 mt-2">
          <i
            id="#likeIcon_<%=post._id%>"
            data-id="<%= post._id %>"
            class="<%= (post.likes.indexOf(user._id) !== -1) ? 'text-red-500 like ri-heart-3-fill' :'like ri-heart-3-line' %>"
          ></i>

          <i id="commentIcon" class="commentIcon ri-chat-3-line"></i>
          <i class="ri-share-circle-line"></i>
        </div>
        <i
          id="saveIcon_<%=post._id%>"
          data-id="<%= post._id %>"
          class="save <%= (user.saved.includes(post._id)) ? 'ri-bookmark-fill' : 'ri-bookmark-line' %>"
        ></i>
      </div>
      <form
        class="commentForm flex hidden items-center gap-2"
        id="commentForm"
        method="post"
        action="/posts/<%=post._id %>/comment"
      >
        <input
          id="commmentInput"
          class="bg-zinc-700 w-[80%] ml-3 h-[30px] rounded-full outline-none px-5"
          type="text"
          name="comment"
        />
        <i
          id="sendComment"
          class="sendComment text-3xl ri-send-plane-2-line"
        ></i>
      </form>
      <h3
        id="likeCount_<%= post._id %>"
        class="px-4 mt-2 text-sm leading-none tracking-tight"
      >
        <%=post.likes.length %> likes
      </h3>

      <h2 class="text-white font-light text-sm mt-2">
        <span class="font-semibold pl-4 pr-2"><%= post.user.username %></span
        ><%= post.caption %>
      </h2>
      <!-- <% post.comments.forEach(function(cmt){ %>
      <h2 class="text-white font-light text-sm mt-2">
        <span class="font-semibold pl-4 pr-2"><%= post.user.username %></span
        ><%= cmt.text %>
      </h2>
      <% }) %> -->
    </div>
    <% }) %>
  </div>
</div>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.min.js"
  integrity="sha512-NQfB/bDaB8kaSXF8E77JjhHG5PM6XVRxvHzkZiwl3ddWCEPBa23T76MuWSwAJdMGJnmQqM0VeY9kFszsrBEFrQ=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"
  integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>
<script>
  function getLike() {
    document.querySelector(".posts").addEventListener("click", function (ev) {
      if (ev.target.classList.contains("like")) {
        axios
          .get("/like/" + ev.target.dataset.id)
          .then((response) => {
            // Update the UI based on the response
            const postId = ev.target.dataset.id;
            const postElement = document.querySelector(`[data-id="${postId}"]`);
            const likeShow = document.querySelector(`#likeCount_${postId}`);
            const likeIcon = document.querySelector(`#likeIcon_${postId}`);
            // Update the like count in the UI based on the response
            const likeCount = response.data.likeCount;
            likeShow.textContent = `${likeCount} likes`;
            // Assuming your response has a property named 'liked'
            const isLiked = response.data.liked;
            // console.log(postElement.classList.toggle);
            // Toggle the class based on whether the post was liked or unliked
            postElement.classList.toggle("text-red-500", isLiked);
            postElement.classList.toggle("ri-heart-3-fill", isLiked);
            postElement.classList.toggle("ri-heart-3-line", !isLiked);

            // Update the color of the like icon below the post image
            //  likeIcon.classList.toggle("text-red-500", response.data.liked);
          })
          .catch((error) => {
            // Handle errors if the like request fails
            console.error("Error liking item:", error);
            // You can show an error message or perform other error handling actions
          });
      }
    });
  }

  // Function to handle double-click like
  function doubleClickLike() {
    document.querySelector(".posts").addEventListener("click", function (ev) {
      if (ev.target.classList.contains("postImage")) {
        const postId = ev.target.dataset.val;
        // console.log(postId);
        // Display the heart icon with animation
        const heartIcon = document.createElement("i");
        heartIcon.className =
          "ri-heart-3-fill absolute left-[40%] top-[45%] text-6xl text-red-500";
        ev.target.parentNode.parentNode.appendChild(heartIcon);

        // Animate the heart icon with GSAP
        gsap.to(heartIcon, {
          scale: 1.5,
          opacity: 0,
          duration: 1,
          onComplete: () => {
            ev.target.parentNode.parentNode.removeChild(heartIcon);
          },
        });
        // Send a request to your backend to update the like count for the post
        axios
          .get("/like/" + postId)
          .then((response) => {
            // Update the UI based on the response

            const postElement = document.querySelector(`[data-id="${postId}"]`);
            const likeShow = document.querySelector(`#likeCount_${postId}`);
            const likeIcon = document.querySelector(`#likeIcon_${postId}`);
            // Update the like count in the UI based on the response
            const likeCount = response.data.likeCount;
            likeShow.textContent = `${likeCount} likes`;
            // Assuming your response has a property named 'liked'
            const isLiked = response.data.liked;
            // console.log(postElement.classList.toggle);
            // Toggle the class based on whether the post was liked or unliked
            postElement.classList.toggle("text-red-500", isLiked);
            postElement.classList.toggle("ri-heart-3-fill", isLiked);
            postElement.classList.toggle("ri-heart-3-line", !isLiked);

            // Update the color of the like icon below the post image
            // likeIcon.classList.toggle("text-red-500", response.data.liked);

            // Update the color of the like icon below the post image
            // likeIcon.classList.add("text-red-500");
          })
          .catch((error) => {
            // Handle errors if the like count update request fails
            console.error("Error updating like count:", error);
          });
      }
    });
  }

  // Define a function to handle saving posts
  function savedPost() {
    document.querySelector(".posts").addEventListener("click", function (ev) {
      if (ev.target.classList.contains("save")) {
        var postId = ev.target.dataset.id;

        axios
          .get("/save/" + postId)
          .then(function (res) {
            if (typeof res.data.saved === "boolean") {
              // Remove all existing classes related to bookmark icon
              ev.target.classList.remove(
                "ri-bookmark-fill",
                "ri-bookmark-line"
              );
              // console.log(res.data.saved);
              // Add the appropriate class based on the saved status
              if (res.data.saved) {
                // console.log("hello")
                ev.target.classList.add("ri-bookmark-fill");
              } else {
                ev.target.classList.add("ri-bookmark-line");
              }
            } else {
              console.error("Saved status is not a boolean:", res.data.saved);
            }
          })
          .catch(function (error) {
            console.error("Error saving post:", error);
          });
      }
    });
  }

  function commentHandle() {
    const btnComments = document.querySelectorAll(".commentIcon");

    btnComments.forEach(function (btn) {
      btn.addEventListener("click", function () {
        // Traverse up the DOM to find the parent post element
        const postElement = btn.closest(".post");

        // Find the comment form within the post element
        const commentForm = postElement.querySelector(".commentForm");

        // Show the comment form
        commentForm.classList.remove("hidden");

        // Find the send button within the comment form
        const sendComment = commentForm.querySelector(".sendComment");

        // Add event listener to the send button
        sendComment.addEventListener("click", function () {
          commentForm.submit();
          commentForm.reset();
          commentForm.classList.add("hidden");
        });
      });
    });
  }

  commentHandle();

  // Call the function to initialize the event listener
  savedPost();

  getLike();
  doubleClickLike();
</script>
<% include ./partials/footer.ejs %>
